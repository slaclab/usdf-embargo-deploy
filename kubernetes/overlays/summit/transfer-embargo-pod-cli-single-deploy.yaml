---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sdf-group-rubin
  # namespace: devel-transfer-embargo
  # namespace: summit
spec:
  storageClassName: sdf-group-rubin
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sdf-data-rubin
  # namespace: devel-transfer-embargo
  # namespace: summit
spec:
  storageClassName: sdf-data-rubin
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: transfer-embargo-temp
  # namespace: devel-transfer-embargo
  # namespace: summit
spec:
  securityContext:
    runAsUser: 18296
    runAsGroup: 4085
  containers:
  - name: transfer-embargo-container
    image: "ghcr.io/lsst-dm/transfer-embargo:latest"
    imagePullPolicy: Always
    command: [ "/bin/bash", "-c", "chmod +x /opt/lsst/software/stack/loadLSST.bash && source /opt/lsst/software/stack/loadLSST.bash && exec /bin/bash" ]
    #command: [ "/bin/bash", "-c", ". /opt/lsst/software/stack/loadLSST.bash && exec /bin/bash" ]
    # Unknown shell: command: [ "/bin/bash", "-c", "source /opt/lsst/software/stack/loadLSST.bash && exec /bin/bash" ]
    # works: command: [ "/bin/bash", "-c", "echo 'Bash is working!'" ]
    # Unknown shell error: command: [ "bash", "-c", "source \"/opt/lsst/software/stack/loadLSST.bash\"" ]
    # Unknown shell error: command: [ "/bin/sh", "-c", "source /opt/lsst/software/stack/loadLSST.bash && exec /bin/sh" ]
    # Unknown shell error: command: [ "bash", "-c", "source /opt/lsst/software/stack/loadLSST.bash && exec bash" ]
    # Unknown shell error: command: [ "bash", "-c", "source /opt/lsst/software/stack/loadLSST.bash" ]
    # Unknown shell error: command: [ "bash", "-c", "source /opt/lsst/software/stack/loadLSST.bash && setup lsst_obs" ]
    # works: command: [ "bash", "-c", "echo $OTHER_ARGUMENTS" ]
    # works: command: [ "bash", "-c", "echo \"$FROMREPO\"" , "echo \"$TOREPO\"", "echo \"$INSTRUMENT\"", "echo --log \"$LOG\"", "echo --pastembargohours \"$PASTEMBARGO\"", "echo $DATAQUERIES", "echo $OTHER_ARGUMENTS" ]
    env:
    - name: FROMREPO
      value: "s3://rubin-summit-users/butler.yaml"
    - name: TOREPO
      value: "/sdf/data/rubin/user/rnevin/scratch"
    #  value: "s3://lsst/users/rnevin/scratch"
    #  value: "/sdf/home/r/rnevin/scratch"
    #  value: "/sdf/data/rubin/user/rnevin/scratch"
    #  value: "/sdf/group/rubin/repo/prompt"
    #  value: "/sdf/data/rubin/user/rnevin/transfer_embargo/tests/data/test_to"
    - name: INSTRUMENT
      value: "LATISS"
    - name: LOG
      value: "True"
    - name: PASTEMBARGO
      value: "1.0"
    - name: DATAQUERIES
    #  value: '{ "datasettype": "raw", "collections": "LATISS/raw/all"}'
      value: '{ "datasettype": ["raw"], "collections": ["LATISS/raw/all"]}'
    - name: OTHER_ARGUMENTS
      value: "--embargohours \"80\" --nowtime \"now\""
    #- name: DATASETTYPE
    #  value: "\"raw\",\"calexp\""
    #- name: COLLECTIONS
    #  value: "\"LATISS/raw/all\",\"LATISS/runs/AUXTEL_DRP_IMAGING_2022-11A/w_2022_46/PREOPS-1616\""
    #- name: DATAQUERIES
    #  valueFrom:
    #    configMapKeyRef:
    #      name: transfer-config
    #      key: transfer.yml
    - name: PGPASSWORD
      valueFrom:
          secretKeyRef:
            name: db-env
            key: pg_password
    - name: PGUSER
      valueFrom:
          secretKeyRef:
            name: db-env
            key: pg_username
    - name: S3_ENDPOINT_URL
      value: https://s3dfrgw.slac.stanford.edu
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: s3
          key: s3_access
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: s3
          key: s3_key
    #- name: DATAQUERIES
    #  value: |
    #    [
    #      {
    #        "datasettype": "raw",
    #        "collections": "LATISS/raw/all"
    #      },
    #      {
    #        "datasettype": "calexp",
    #        "collections": "LATISS/runs/AUXTEL_DRP_IMAGING_2022-11A/w_2022_46/PREOPS-1616"
    #      }
    #    ]
    volumeMounts:
      #- name: config
        # directory in the container:
        # it does not need to exist already,
        # make apply will make sure it exists
      #  mountPath: /etc/config
      - name: sdf-group-rubin
        mountPath: /sdf/group/rubin
      - name: sdf-data-rubin
        mountPath: /sdf/data/rubin
  volumes:
  #- name: config
  #  configMap:
  #    name: transfer-config
  - name: sdf-group-rubin
    persistentVolumeClaim:
      claimName: sdf-group-rubin
      # storageClassName: sdf-group-rubin
  - name: sdf-data-rubin
    persistentVolumeClaim:
      claimName: sdf-data-rubin
      # storageClassName: sdf-data-rubin
  restartPolicy: OnFailure
